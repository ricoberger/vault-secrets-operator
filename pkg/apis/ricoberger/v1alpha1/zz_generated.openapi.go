// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/ricoberger/v1alpha1.VaultSecret":       schema_pkg_apis_ricoberger_v1alpha1_VaultSecret(ref),
		"./pkg/apis/ricoberger/v1alpha1.VaultSecretSpec":   schema_pkg_apis_ricoberger_v1alpha1_VaultSecretSpec(ref),
		"./pkg/apis/ricoberger/v1alpha1.VaultSecretStatus": schema_pkg_apis_ricoberger_v1alpha1_VaultSecretStatus(ref),
	}
}

func schema_pkg_apis_ricoberger_v1alpha1_VaultSecret(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VaultSecret is the Schema for the vaultsecrets API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/ricoberger/v1alpha1.VaultSecretSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/ricoberger/v1alpha1.VaultSecretStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/ricoberger/v1alpha1.VaultSecretSpec", "./pkg/apis/ricoberger/v1alpha1.VaultSecretStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_ricoberger_v1alpha1_VaultSecretSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VaultSecretSpec defines the desired state of VaultSecret",
				Properties: map[string]spec.Schema{
					"keys": {
						SchemaProps: spec.SchemaProps{
							Description: "Keys is an array of Keys, which should be included in the Kubernetes secret. If the Keys field is ommitted all keys from the Vault secret will be included in the Kubernetes secret.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Description: "Path is the path of the corresponding secret in Vault.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretEngine": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretEngine specifies the type of the Vault secret engine in which the secret is stored. Currently the 'KV Secrets Engine - Version 1' and 'KV Secrets Engine - Version 2' are supported. The value must be 'kv'. If the value is omitted or an other values is used the Vault Secrets Operator will try to use the KV secret engine.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type is the type of the Kubernetes secret, which will be created by the Vault Secrets Operator.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version sets the version of the secret which should be used. The version is only used if the KVv2 secret engine is used. If the version is omitted the Operator uses the latest version of the secret. If the version omitted and the VAULT_RECONCILIATION_TIME environment variable is set, the Kubernetes secret will be updated if the Vault secret changes.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"binary": {
						SchemaProps: spec.SchemaProps{
							Description: "Version sets the version of the secret which should be used. The version is only used if the KVv2 secret engine is used. If the version is omitted the Operator uses the latest version of the secret. If the version omitted and the VAULT_RECONCILIATION_TIME environment variable is set, the Kubernetes secret will be updated if the Vault secret changes.",
							Type:        []string{"bool"},
							Format:      "",
						},
					},
				},
				Required: []string{"path", "type"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_ricoberger_v1alpha1_VaultSecretStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VaultSecretStatus defines the observed state of VaultSecret",
				Properties:  map[string]spec.Schema{},
			},
		},
		Dependencies: []string{},
	}
}
